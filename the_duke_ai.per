;=====================================================================
;	Set Author, Version and Author E-Mail
;=====================================================================



(defrule
	(true)
=>
	(set-author-version "The Duke-AI - Version 1.5")
	(set-author-name "Author name: tim_kos / DarkAngelBGE alias Tim Koschuetzki")
	(set-author-email "Author e-mail: tim@transloadit.com")
	(disable-self)
)
;		Load all the files of The Duke-AI
;======================================================================

(load "the_duke_lib\constants")
(load "the_duke_lib\buildings")
(load "the_duke_lib\diplomacy")
(load "the_duke_lib\resign")
(load "the_duke_lib\cheating")
(load "the_duke_lib\commodity")
(load "the_duke_lib\find_target_player")
(load "the_duke_lib\defense")
(load "the_duke_lib\late_game")

#load-if-not-defined WONDER-RACE
(load "the_duke_lib\attack")

(defrule
	(true)
=>
	(set-goal RUSH-CONTROL NO)
	(disable-self)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(load "the_duke_lib\rush")
#end-if
#end-if
#end-if

(load "the_duke_lib\age_advancement")
(load "the_duke_lib\technologies")
(load "the_duke_lib\unique_technologies")

#load-if-not-defined WONDER-RACE
(load "the_duke_lib\techs_blacksmith")
#end-if

#load-if-not-defined VICTORY-CONQUEST
#load-if-not-defined WONDER-RACE
(load "the_duke_lib\wonder")
#end-if
#end-if

(load "the_duke_lib\unit_combos")
(load "the_duke_lib\military_parity")
(load "the_duke_lib\military")
(load "the_duke_lib\counter_units")


#load-if-defined DEFEND-WONDER
(load "the_duke_lib\wonder_kill")
#end-if

(load "the_duke_lib\resource_control")
(load "the_duke_lib\training_villagers")

;STARTUP
;======================================================================

;goals // note, the other goal don't need any initialisation or have got other initialisation conditions

(defrule
	(true)
=>
	(set-goal RESOURCE-NEEDED NO)
	(set-goal ABLE-TO-BUILD-BARRACKS NO)
	(set-goal ABLE-TO-BUILD-ARCHERY-RANGE NO)
	(set-goal ABLE-TO-BUILD-STABLE NO)
	(set-goal GET-NEW-FRIEND NO)
	(set-goal HUMAN-DIPLOMACY NO)
	(set-goal MAIN-SHIP-BUILDER NOTICE)
	(set-goal RUSH-ATTACK-STARTED NO)
	(disable-self)
)

(defrule
	(true)
=>
	(set-goal CAN-USE-TOWN-SIZE-ATTACK YES)
	(disable-self)
)

#load-if-defined LUDIKRIS-MAP
(defrule
	(true)
=>
	(set-goal CAN-USE-TOWN-SIZE-ATTACK NO)
	(set-strategic-number sn-number-attack-groups 20)
	(set-strategic-number sn-group-form-distance 40)
	(set-strategic-number sn-attack-group-gather-spacing 9)
	(set-strategic-number sn-percent-attack-soldiers 90)
	(set-strategic-number sn-percent-attack-boats 90)
	(set-strategic-number sn-task-ungrouped-soldiers NO)
	(disable-self)
)
#end-if


(defrule
	(true)
=>
	(set-goal G-ABLE-TO-UPGRADE-INFANTRY NO)
	(set-goal G-ABLE-TO-UPGRADE-ARCHERS NO)
	(set-goal G-ABLE-TO-UPGRADE-CAVALRY NO)
	(set-goal CAN-CHANGE-RESOURCE-NEEDED-GOAL YES)
	(disable-self)
)

(defrule
	(true)
=>
	(set-goal G-PRIMARY-UNIT NO)
	(set-goal G-PRIMARY-UNIT2 NO)
	(set-goal G-SECONDARY-UNIT NO)
	(set-goal G-SECONDARY-UNIT2 NO)

	(set-goal PRIMARY-COMBAT-SIEGE-UNIT NO)
	(set-goal PRIMARY-COMBAT-SIEGE-UNIT2 NO)
	(set-goal SECONDARY-COMBAT-SIEGE-UNIT NO)
	(set-goal SECONDARY-COMBAT-SIEGE-UNIT2 NO)

	(disable-self)
)


#load-if-defined DEATH-MATCH

(defrule
	(not (goal RUSH-CONTROL NO))
=>
	(set-goal RUSH-CONTROL NO)
)

#end-if



#load-if-defined DEFEND-WONDER

(defrule
	(not (goal RUSH-CONTROL NO))
=>
	(set-goal RUSH-CONTROL NO)
)

#end-if



;timers // note, the other timers have got onther initialisation conditions

(defrule
	(true)
=>
	(enable-timer T-DIPLOMACY 1)
	(enable-timer T-NEED-HELP 1)
	(enable-timer T-GET-NEW-FRIEND 1)
	(disable-self)
)

#load-if-defined AZTEC-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am an Atztec Duke!")
	(chat-to-player every-ally "Teambonus: relics +33% gold!")
	(chat-to-player every-enemy "40 You will be defeated by an Atztec Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined BRITON-CIV

(defrule
  	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a British Duke!")
	(chat-to-player every-ally "Teambonus: +1 range for archers, +2 attack for towers!")
	(chat-to-player every-enemy "40 You will be defeated by a British Duke!")
	(disable-self)
)

#end-if

;*************************
#load-if-defined BYZANTINE-CIV

(defrule
  	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Byzantine Duke!")
	(chat-to-player every-ally "Teambonus: monks heal 50% faster!")
	(chat-to-player every-enemy "40 You will be defeated by a Byzantine Duke!")
	(disable-self)
)

#end-if

;*************************
#load-if-defined CHINESE-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Chinese Duke!")
	(chat-to-player every-ally "Teambonus: +45 food for farms!")
	(chat-to-player every-enemy "40 You will be defeated by a Chinese Duke!")
	(disable-self)
)

#end-if

;*************************
#load-if-defined CELTIC-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Celtic Duke!")
	(chat-to-player every-ally "Teambonus: siege-workshop works 20% faster!")
	(chat-to-player every-enemy "40 You will be defeated by a Celtic Duke!")
	(disable-self)
)

#end-if

;*************************
#load-if-defined FRANKISH-CIV

(defrule
  	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Frankish Duke!")
	(chat-to-player every-ally "Teambonus: knights +2 LOS!")
	(chat-to-player every-enemy "40 You will be defeated by a Frankish Duke!")
	(disable-self)
)

#end-if

;*************************
#load-if-defined GOTHIC-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Gothic Duke!")
	(chat-to-player every-ally "Teambonus: barracks works 20% faster!")
	(chat-to-player every-enemy "40 You will be defeated by a Gothic Duke!")
	(disable-self)
)

#end-if

;*************************
#load-if-defined HUN-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Hunic Duke!")
	(chat-to-player every-ally "Teambonus: stable works 20% faster!")
	(chat-to-player every-enemy "40 You will be defeated by a Hunic Duke!")
	(disable-self)
)

#end-if

;*************************
#load-if-defined JAPANESE-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Japanese Duke!")
	(chat-to-player every-ally "Teambonus: +50% LOS for galleys!")
	(chat-to-player every-enemy "40 You will be defeated by a Japanese Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined KOREAN-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Korean Duke!")
	(chat-to-player every-ally "Teambonus: +1 range for mangonels!")
	(chat-to-player every-enemy "40 You will be defeated by a Korean Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined MAYAN-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Mayan Duke!")
	(chat-to-player every-ally "Teambonus: walls cost -50%!")
	(chat-to-player every-enemy "40 You will be defeated by a Mayan Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined MONGOL-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Mongol Duke!")
	(chat-to-player every-ally "Teambonus: +2 LOS for scouts, light-cav and hussar!")
	(chat-to-player every-enemy "40 You will be defeated by a Mongol Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined PERSIAN-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Persian Duke!")
	(chat-to-player every-ally "Teambonus: +2 attack for knights against archers!")
	(chat-to-player every-enemy "40 You will be defeated by a Persian Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined SARACEN-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Saracen Duke!")
	(chat-to-player every-ally "Teambonus: archers +1 attack against buildings!")
	(chat-to-player every-enemy "40 You will be defeated by a Saracen Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined SPANISH-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Spanish Duke!")
	(chat-to-player every-ally "Teambonus: tradecarts and tradecogs get +33% gold!")
	(chat-to-player every-enemy "40 You will be defeated by a Spanish Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined TEUTONIC-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Teutonic Duke!")
	(chat-to-player every-ally "Teambonus: more resistance against conversion!")
	(chat-to-player every-enemy "40 You will be defeated by a Teutonic Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined TURKISH-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Turkish Duke!")
	(chat-to-player every-ally "Teambonus: cannon units are trained 20% faster!")
	(chat-to-player every-enemy "40 You will be defeated by a Turkish Duke!")
	(disable-self)
)

#end-if

;************************
#load-if-defined VIKING-CIV

(defrule
 	(game-time > 4)
=>
 	(chat-to-player every-ally "39 I am a Viking Duke!")
	(chat-to-player every-ally "Teambonus: docks cost -25%!")
	(chat-to-player every-enemy "40 You will be defeated by a Viking Duke!")
	(disable-self)
)

#end-if



;****************************************
;****************************************
;MAP-LOADING



;LAND MAPS
;---------

#load-if-defined ARABIA-MAP
(defrule
	(true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
#load-if-defined AMAZON-TUNNEL-MAP
(defrule
	(true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined ARENA-MAP
(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined BLACK-FOREST-MAP
(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined FORTRESS-MAP
(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined GOLD-RUSH-MAP
(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined HIGHLAND-MAP
(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined MONGOLIA-MAP
(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined YUCATAN-MAP
(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined OASIS-MAP
(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;******************************
#load-if-defined GHOST-LAKE-MAP
(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;******************************
#load-if-defined SCANDINAVIA-MAP
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if

;WATER MAPS
;----------

#load-if-defined ARCHIPELAGO-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\warboat_prepare")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined ISLANDS-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\warboat_prepare")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND ISLAND-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined TEAM-ISLANDS-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\warboat_prepare")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined BALTIC-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined COASTAL-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND RIVERS-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined CONTINENTAL-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined CRATER-LAKE-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true)=> (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined MEDITERRANEAN-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined RIVERS-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND RIVERS-MAP) (disable-self))
#end-if
;*******************************
#load-if-defined NOMAD-MAP
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;******************************
#load-if-defined SALT-MARSH-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND RIVERS-MAP) (disable-self))
#end-if
;******************************
#load-if-defined MIGRATION-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\warboat_prepare")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if

;REAL-WORLD-MAPS
;---------------

#load-if-defined REAL-WORLD-BYZANTIUM-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\warboat_prepare")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;******************************
#load-if-defined REAL-WORLD-CARIBBEAN-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND LAND-MAP) (disable-self))
#end-if
;******************************
#load-if-defined REAL-WORLD-ENGLAND-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\warboat_prepare")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;******************************
#load-if-defined REAL-WORLD-FRANCE-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND RIVERS-MAP) (disable-self))
#end-if
;******************************
#load-if-defined REAL-WORLD-ITALY-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\warboat_prepare")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND RIVERS-MAP) (disable-self))
#end-if
;******************************
#load-if-defined REAL-WORLD-JUTLAND-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\warboat_prepare")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;******************************
#load-if-defined REAL-WORLD-MIDEAST-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND RIVERS-MAP) (disable-self))
#end-if
;******************************
#load-if-defined REAL-WORLD-NIPPON-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\warboat_prepare")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;******************************
#load-if-defined REAL-WORLD-SPAIN-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND WATER-MAP) (disable-self))
#end-if
;******************************
#load-if-defined REAL-WORLD-TEXAS-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) => (set-goal MAP-KIND RIVERS-MAP) (disable-self))
#end-if

;UNKNOWN-MAPS
;------------

#load-if-defined SCENARIO-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) =>
	(chat-to-player every-human "Check whether this map has got water or not and then")
	(chat-to-player every-human "rework thy AI-script accordingly!")(chat-to-player every-human "45") (set-goal MAP-KIND RIVERS-MAP)
	(disable-self)
)
#end-if
;******************************
#load-if-defined CUSTOM-MAP
(load "the_duke_lib\warboat")
(load "the_duke_lib\fishingship")

(defrule (true) =>
	(set-goal MAP-KIND NOTICE)
	(disable-self)
)



(defrule
	(game-time > 8)
=>
	(chat-to-all "On which map type are we playing?")
	(chat-to-all "Answer with 1 for land, 2 for ocean, 3 for rivers")
	(chat-to-all "and 4 for island!")
	(chat-to-all "You must answer within 30 secs, otherwise I will consider this map")
	(chat-to-all "to be land-based!")
	(enable-timer T-RESIGN 30)
	(disable-self)
)



(defrule
	(game-time > 5)
	(or
		(taunt-detected any-computer 1)
		(taunt-detected any-human 1)
	)
	(goal MAP-KIND NOTICE)
=>
	(disable-timer T-RESIGN)
	(acknowledge-taunt this-any-computer 1)
	(acknowledge-taunt this-any-human 1)
	(chat-to-all "Okay, one of you told me this is a land map!")
	(chat-to-all "I now choose my strategy....")
	(set-goal MAP-KIND LAND-MAP)
)

(defrule
	(game-time > 5)
	(or
		(taunt-detected any-computer 2)
		(taunt-detected any-human 2)
	)
	(goal MAP-KIND NOTICE)
=>
	(disable-timer T-RESIGN)
	(acknowledge-taunt this-any-computer 2)
	(acknowledge-taunt this-any-human 2)
	(chat-to-all "Okay, one of you told me this is an ocean map!")
	(chat-to-all "I now choose my strategy....")
	(set-goal MAP-KIND WATER-MAP)
)

(defrule
	(game-time > 5)
	(or
		(taunt-detected any-computer 3)
		(taunt-detected any-human 3)
	)
	(goal MAP-KIND NOTICE)
=>
	(disable-timer T-RESIGN)
	(acknowledge-taunt this-any-computer 3)
	(acknowledge-taunt this-any-human 3)
	(chat-to-all "Okay, one of you told me this is a rivers map!")
	(chat-to-all "I now choose my strategy....")
	(set-goal MAP-KIND RIVERS-MAP)
)

(defrule
	(game-time > 5)
	(or
		(taunt-detected any-computer 4)
		(taunt-detected any-human 4)
	)
	(goal MAP-KIND NOTICE)
=>
	(disable-timer T-RESIGN)
	(acknowledge-taunt this-any-computer 4)
	(acknowledge-taunt this-any-human 4)
	(chat-to-all "Okay, one of you told me this is an islands map!")
	(chat-to-all "I now choose my strategy....")
	(set-goal MAP-KIND ISLAND-MAP)
)



(defrule
	(timer-triggered T-RESIGN)
=>
	(disable-timer T-RESIGN)
	(chat-to-all "Okay, time is up and I must choose my strategy now!")
	(chat-to-all "I consider this map to be land-based!")
	(set-goal MAP-KIND LAND-MAP)
)

#end-if		;if custom-map



;======================================================================
;		STRATEGIC-NUMBERS
;======================================================================



#load-if-defined KING-OF-THE-HILL

(defrule
	(hold-koh-ruin)
=>
	(set-strategic-number sn-gather-idle-soldiers-at-center YES)
)



(defrule
	(not (hold-koh-ruin))
	(military-population < TWENTY-PERCENT-POP)
=>
	(set-strategic-number sn-gather-idle-soldiers-at-center NO)
)



(defrule
	(not (hold-koh-ruin))
	(military-population >= TWENTY-PERCENT-POP)
=>
	(set-strategic-number sn-gather-idle-soldiers-at-center YES)
)

#end-if



(defrule
	(or
		(players-current-age any-enemy > feudal-age)
		(players-military-population any-enemy > 2)
	)
=>
	(set-strategic-number sn-allow-civilian-defense NO)
	(disable-self)
)



#load-if-defined SPANISH-CIV

(defrule
	(research-completed my-unique-research)
=>
	(set-strategic-number sn-allow-civilian-defense YES)
	(disable-self)
)

#end-if		;if civ == spanish



;CIVIL-NUMBERS
;-------------



#load-if-not-defined NOMAD-MAP

(defrule
	(true)
=>
	(set-strategic-number sn-minimum-civilian-explorers 2)
	(set-strategic-number sn-cap-civilian-explorers 2)
	(set-strategic-number sn-percent-civilian-explorers 67)
	(set-strategic-number sn-percent-civilian-builders 0)
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(set-strategic-number sn-total-number-explorers 3)
	(set-strategic-number sn-number-explore-groups 3)
	(set-strategic-number sn-minimum-explore-group-size 1)
	(set-strategic-number sn-maximum-explore-group-size 1)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-minimum-boat-explore-group-size 1)
	(set-strategic-number sn-maximum-boat-explore-group-size 1)
	(set-strategic-number sn-number-boat-explore-groups 1)
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(set-strategic-number sn-cap-civilian-gatherers -1)
	(set-strategic-number sn-number-enemy-objects-required 2)
	(disable-self)
)



(defrule
	(or
		(players-unit-type-count my-player-number 958 > 0)
		(resource-found food)
	)
=>
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-builders 3)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-builders 0)
	(set-strategic-number sn-percent-civilian-gatherers 100)
	(disable-self)
)

#end-if

(defrule
	(map-type nomad)
	(game-time < 90)
=>
	(set-strategic-number sn-minimum-civilian-explorers 6)
	(set-strategic-number sn-cap-civilian-explorers 6)
	(set-strategic-number sn-cap-civilian-builders 0)
	(set-strategic-number sn-cap-civilian-gatherers 0)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-percent-civilian-builders 0)
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(disable-self)
)

(defrule
	(map-type nomad)
	(game-time > 180)
	(unit-type-count villager < 15)
	(starting-resources < high-resources)
	(or
		(unit-type-count scout-cavalry == 0)
		(unit-type-count eagle-warrior == 0)
	)
=>
	(set-strategic-number sn-minimum-civilian-explorers 1)
	(set-strategic-number sn-cap-civilian-explorers 1)
	(set-strategic-number sn-percent-civilian-explorers 5)
	(set-strategic-number sn-percent-civilian-builders 15)
	(set-strategic-number sn-percent-civilian-gatherers 80)
	(disable-self)
)

(defrule
	(map-type nomad)
	(game-time > 180)
	(unit-type-count villager < 15)
	(starting-resources == high-resources)
	(or
		(unit-type-count scout-cavalry == 0)
		(unit-type-count eagle-warrior == 0)
	)
=>
	(set-strategic-number sn-minimum-civilian-explorers 1)
	(set-strategic-number sn-cap-civilian-explorers 1)
	(set-strategic-number sn-percent-civilian-explorers 5)
	(set-strategic-number sn-percent-civilian-builders 80)
	(set-strategic-number sn-percent-civilian-gatherers 15)
	(disable-self)
)



(defrule
	(unit-type-count galley-line > 0)
=>
	(set-strategic-number sn-total-number-explorers 2)
)



#load-if-not-defined DEATH-MATCH

(defrule
	(current-age == dark-age)
=>
	(set-strategic-number sn-cap-civilian-builders 3)
	(disable-self)
)



(defrule
	(current-age == feudal-age)
=>
	(set-strategic-number sn-cap-civilian-builders 5)
	(disable-self)
)



(defrule
	(current-age == castle-age)
=>
	(set-strategic-number sn-cap-civilian-builders 8)
	(disable-self)
)



(defrule
	(current-age == imperial-age)
=>
	(set-strategic-number sn-cap-civilian-builders 8)
	(disable-self)
)

#else		;if game type != death-match

(defrule
	(current-age == dark-age)
=>
	(set-strategic-number sn-cap-civilian-builders 5)
	(disable-self)
)



(defrule
	(current-age == feudal-age)
=>
	(set-strategic-number sn-cap-civilian-builders 8)
	(disable-self)
)



(defrule
	(current-age == castle-age)
=>
	(set-strategic-number sn-cap-civilian-builders 12)
	(disable-self)
)



(defrule
	(current-age == imperial-age)
=>
	(set-strategic-number sn-cap-civilian-builders 12)
	(disable-self)
)

#end-if		;if game type == death-match



#load-if-defined WONDER-RACE


(defrule
	(current-age == imperial-age)
	(building-type-count-total wonder == 0)
=>
	(set-strategic-number sn-cap-civilian-builders 8)
	(set-strategic-number sn-percent-civilian-builders 0)
	(set-strategic-number sn-percent-civilian-gatherers 100)
)

(defrule
	(current-age == imperial-age)
	(building-type-count-total wonder > 0)
=>
	(set-strategic-number sn-percent-civilian-builders 95)
	(set-strategic-number sn-percent-civilian-gatherers 5)
	(set-strategic-number sn-cap-civilian-builders 99)
)

#end-if		;if not game-type == wonder-race



;CAMP DISTANCE
;-------------

;try to build the first lumber camp as close as possible to the TC
(defrule
	(resource-found wood)
=>
	(chat-local-to-self "Wood found!")
	(disable-self)
)

(defrule
	(building-type-count-total town-center > 0)
	(building-type-count-total lumber-camp == 0)
=>
	(set-strategic-number sn-mill-max-distance 28)
	(set-strategic-number sn-camp-max-distance 1)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 20)
=>
	(set-strategic-number sn-camp-max-distance 3)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 30)
=>
	(set-strategic-number sn-camp-max-distance 5)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 60)
=>
	(set-strategic-number sn-camp-max-distance 7)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 90)
=>
	(set-strategic-number sn-camp-max-distance 9)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 120)
=>
	(set-strategic-number sn-camp-max-distance 11)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 150)
=>
	(set-strategic-number sn-camp-max-distance 13)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 180)
=>
	(set-strategic-number sn-camp-max-distance 15)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 210)
=>
	(set-strategic-number sn-camp-max-distance 17)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 240)
=>
	(set-strategic-number sn-camp-max-distance 19)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 270)
=>
	(set-strategic-number sn-camp-max-distance 21)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 300)
=>
	(set-strategic-number sn-camp-max-distance 25)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 330)
=>
	(set-strategic-number sn-camp-max-distance 30)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 360)
=>
	(set-strategic-number sn-camp-max-distance 35)
	(disable-self)
)
(defrule
	(not (resource-found wood))
	(game-time > 390)
=>
	(set-strategic-number sn-camp-max-distance 40)
	(disable-self)
)

(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total town-center > 0)
=>
	(set-strategic-number sn-camp-max-distance 20)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 12)
	(building-type-count-total lumber-camp < 1)
	(game-time > 300)
=>
	(set-strategic-number sn-camp-max-distance 12)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 15)
	(building-type-count-total lumber-camp < 1)
	(game-time > 360)
=>
	(set-strategic-number sn-camp-max-distance 15)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 18)
	(building-type-count-total lumber-camp < 1)
	(game-time > 420)
=>
	(set-strategic-number sn-camp-max-distance 18)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 21)
	(building-type-count-total lumber-camp < 1)
	(game-time > 480)
=>
	(set-strategic-number sn-camp-max-distance 21)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 25)
	(building-type-count-total lumber-camp < 1)
	(game-time > 600)
=>
	(set-strategic-number sn-camp-max-distance 25)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 25)
	(game-time > 600)
=>
	(set-strategic-number sn-camp-max-distance 25)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 32)
	(game-time > 1200)
=>
	(set-strategic-number sn-camp-max-distance 32)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 50)
	(game-time > 1800)
=>
	(set-strategic-number sn-camp-max-distance 50)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 70)
	(game-time > 4500)
=>
	(set-strategic-number sn-camp-max-distance 70)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 100)
	(game-time > 7200)
=>
	(set-strategic-number sn-camp-max-distance 100)
	(disable-self)
)

#load-if-defined ARABIA-MAP
(defrule
	(strategic-number sn-camp-max-distance < 40)
	(game-time > 2700)
=>
	(set-strategic-number sn-camp-max-distance 40)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 50)
	(game-time > 3600)
=>
	(set-strategic-number sn-camp-max-distance 50)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 100)
	(game-time > 4500)
=>
	(set-strategic-number sn-camp-max-distance 100)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 125)
	(game-time > 5400)
=>
	(set-strategic-number sn-camp-max-distance 125)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 150)
	(game-time > 6300)
=>
	(set-strategic-number sn-camp-max-distance 150)
	(disable-self)
)

(defrule
	(strategic-number sn-camp-max-distance < 200)
	(game-time > 7200)
=>
	(set-strategic-number sn-camp-max-distance 200)
	(disable-self)
)
#end-if
;----------------------------------



;OUR ATTACK GROUP SIZE
;------------------------



(defrule
	(true)
=>
	(set-strategic-number sn-group-form-distance 40)
	(set-strategic-number sn-number-attack-groups 10)
	(set-strategic-number sn-attack-group-gather-spacing 5)
	(set-strategic-number sn-minimum-defend-group-size 0)
	(set-strategic-number sn-maximum-defend-group-size 0)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 20)
	(disable-self)
)



(defrule
	(true)
=>
	(set-strategic-number sn-group-commander-selection-method 0)
	(set-strategic-number sn-consecutive-idle-unit-limit 4)
	(set-strategic-number sn-task-ungrouped-soldiers NO)
	(set-strategic-number sn-group-leader-defense-distance 3)
	(set-strategic-number sn-percent-enemy-sighted-response 100)
	(set-strategic-number sn-enemy-sighted-response-distance enemy-sighted-response-distance)
	(set-strategic-number sn-maximum-gaia-attack-response 2)
	(set-strategic-number sn-disable-sighted-response-cap 0)
	(set-strategic-number sn-minimum-dropsite-buffer 13)
	(set-strategic-number sn-intelligent-gathering 1)
	(set-strategic-number sn-max-retask-gather-amount 0)
	(set-strategic-number sn-retask-gather-amount 0)
	(set-strategic-number sn-use-by-type-max-gathering 0)
	(disable-self)
)



(defrule
	(true)
=>
	(set-strategic-number sn-attack-intelligence attack-intelligence)
	(set-strategic-number sn-initial-attack-delay initial-attack-delay)
	(set-strategic-number sn-initial-attack-delay-type initial-attack-delay-type)
	(set-strategic-number sn-attack-group-size-randomness 0)
	(set-strategic-number sn-scale-minimum-attack-group-size 0)
	(set-strategic-number sn-scale-maximum-attack-group-size 0)
	(set-strategic-number sn-attack-separation-time-randomness 0)
	(set-strategic-number sn-special-attack-type1 -1)
	(set-strategic-number sn-special-attack-type2 -1)
	(set-strategic-number sn-special-attack-type3 -1)
	;	(set-strategic-number sn-special-attack-influence1 100); 10000
;	(set-strategic-number sn-special-attack-influence2 100); 10000
;	(set-strategic-number sn-special-attack-influence3 100); 10000
	(disable-self)
)

(defrule
	(true)
=>
	(up-set-defense-priority c: market c: 3000); 2500
	(up-set-offense-priority c: market c: 6); 5
	(up-set-defense-priority c: castle c: 1000)
	(up-set-defense-priority c: bombard-tower c: 1000)
	(up-set-defense-priority c: krepost c: 1500)
	(up-set-defense-priority c: town-center c: 6000)
	(up-set-defense-priority c: town-center-foundation c: 6000)
	(up-set-defense-priority c: watch-tower c: 4000); market 3000
	(up-set-defense-priority c: monastery c: 9000)
	(up-set-defense-priority c: barracks c: 9000)
	(up-set-defense-priority c: stable c: 9000)
	(up-set-defense-priority c: archery-range c: 9000)
	(up-set-defense-priority c: siege-workshop c: 9000)
	(up-set-defense-priority c: lumber-camp c: 32767)
	(up-set-defense-priority c: mining-camp c: 32767)
	(up-set-defense-priority c: mill c: 10000)
	(up-set-defense-priority c: dock c: 2000)
	(up-set-defense-priority c: house c: 1500); 2
	(up-set-offense-priority c: house c: 1)
	(disable-self)
)

(defrule
	(true)
=>
	(up-set-offense-priority c: castle c: 1)
	(up-set-offense-priority c: bombard-tower c: 1)
	(up-set-offense-priority c: krepost c: 2)
	(up-set-offense-priority c: town-center c: 7)
	(up-set-offense-priority c: town-center-foundation c: 7)
	(up-set-offense-priority c: watch-tower c: 9); 7
	(up-set-offense-priority c: monastery c: 6)
	(up-set-offense-priority c: barracks c: 4)
	(up-set-offense-priority c: stable c: 4)
	(up-set-offense-priority c: archery-range c: 4)
	(up-set-offense-priority c: siege-workshop c: 5)
	(up-set-offense-priority c: lumber-camp c: 8)
	(up-set-offense-priority c: mining-camp c: 8)
	(up-set-offense-priority c: mill c: 10)
	(up-set-offense-priority c: dock c: 10)
	(disable-self)	
)


(defrule
	(research-completed ri-loom)
=>
	(set-strategic-number sn-maximum-gaia-attack-response 1)
	(disable-self)
)
;---------------------------------



(defrule
	(true)
=>
	(set-strategic-number sn-number-defend-groups 0)
	(set-strategic-number sn-gold-defend-priority 1)
	(set-strategic-number sn-stone-defend-priority 1)
	(set-strategic-number sn-forage-defend-priority 1)
	(set-strategic-number sn-town-defend-priority 1)
	(set-strategic-number sn-relic-defend-priority 1)
	(set-strategic-number sn-dock-defend-priority 1)
	(set-strategic-number sn-defense-distance 3)
	(set-strategic-number sn-sentry-distance 12)
	(set-strategic-number sn-sentry-distance-variation 0)
	(set-strategic-number sn-defend-overlap-distance 1)
	(disable-self)
)



(defrule
	(true)
=>
	(set-strategic-number sn-gather-defense-units YES)
)
;-----------------------------------



(defrule
	(true)
=>
	(set-strategic-number sn-max-build-plan-gatherer-percentage 95)
	(set-strategic-number sn-random-placement-factor 0)
	(set-strategic-number sn-required-forest-tiles 10)
	(set-strategic-number sn-initial-exploration-required initial-exploration-required)
	(disable-self)
)

(defrule
	(map-type highland)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock 300)
	(disable-self)
)
(defrule
	(not (map-type highland))
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock 1000)
	(disable-self)
)
;-----------------------------

(defrule
	(true)
=>
	(set-strategic-number sn-target-evaluation-siege-weapon	500)
	(set-strategic-number sn-enable-new-building-system 1)
	(set-strategic-number sn-target-evaluation-hitpoints 0)
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
	(set-strategic-number sn-target-evaluation-distance 0)
	(set-strategic-number sn-target-evaluation-damage-capability 20)
	(set-strategic-number sn-target-evaluation-kills 0)
	(set-strategic-number sn-target-evaluation-rof 0)
	(set-strategic-number sn-target-evaluation-randomness 0)
	(set-strategic-number sn-target-evaluation-attack-attempts 0)
	(set-strategic-number sn-target-evaluation-range 0)
	(set-strategic-number sn-target-evaluation-continent 0)
	(set-strategic-number sn-target-evaluation-time-kill-ratio 50)
	(set-strategic-number sn-target-evaluation-boat 0)
	(set-strategic-number sn-target-evaluation-in-progress 0)
	(set-strategic-number sn-ignore-tower-elevation 1)
	(disable-self)
)



(defrule
	(goal UNDER-ATTACK NO)
=>
	(set-strategic-number sn-target-evaluation-siege-weapon 80)
)

(defrule
	(goal UNDER-ATTACK YES)
	(players-unit-type-count any-enemy trebuchet < 1)
=>
	(set-strategic-number sn-target-evaluation-siege-weapon 0)
)

(defrule
	(goal UNDER-ATTACK YES)
	(players-unit-type-count any-enemy trebuchet >= 1)
=>
	(set-strategic-number sn-target-evaluation-siege-weapon 40)
)
;-----------------



(defrule
	(true)
=>
	(set-strategic-number sn-relic-return-distance relic-return-distance)
	(set-strategic-number sn-minimum-peace-like-level peace-like-level)
	(set-strategic-number sn-scaling-frequency scaling-frequency)
	(set-strategic-number sn-build-frequency build-frequency)
	(set-strategic-number sn-save-scenario-information save-scenario-information)
	(set-strategic-number sn-number-build-attempts-before-skip 20)
	(set-strategic-number sn-attack-diplomacy-impact 50)
	(set-strategic-number sn-easiest-reaction-percentage 20)
	(set-strategic-number sn-easier-reaction-percentage 20)
	(set-strategic-number sn-do-not-scale-for-difficulty-level 1)
	(set-strategic-number sn-easiest-reaction-percentage 100)
	(set-strategic-number sn-easier-reaction-percentage 100)
	(set-strategic-number sn-scaling-frequency 10)
	(set-strategic-number sn-coop-share-attacking 1)
	(set-strategic-number sn-coop-share-attacking-interval 2)
	(disable-self)
)


(defrule
	(true)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-disable-tower-priority 1)
	(set-strategic-number sn-wall-targeting-mode 1)
	(set-strategic-number sn-enable-offensive-priority 1)
	(up-set-defense-priority c: stone-wall-line c: 1); 0
	(up-set-defense-priority c: palisade-wall c: 3000); 2
	(up-set-defense-priority c: gate-class c: 1250); 2
	(up-set-offense-priority c: stone-wall-line c: 0)
	(up-set-offense-priority c: palisade-wall c: 2); 1
	(up-set-offense-priority c: gate-class c: 2)
	(set-strategic-number sn-local-targeting-mode 1)
	(set-strategic-number sn-enable-patrol-attack 1)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-track-player-history track-player-history)
	(set-strategic-number sn-attack-winning-player attack-winning-player)
	(set-strategic-number sn-coop-share-information coop-share-information)
	(set-strategic-number sn-attack-winning-player-factor attack-winning-player-factor)
	(set-strategic-number sn-coop-share-attacking coop-share-attacking)
	(set-strategic-number sn-coop-share-attacking-interval coop-share-attacking-interval)
	(set-strategic-number sn-minimum-amount-for-trading 200)
	(set-strategic-number sn-minimum-boar-hunt-group-size 6)
	(disable-self)
)



(defrule
 	(true)
=>
	(set-strategic-number sn-wood-dropsite-distance 7)
	(set-strategic-number sn-food-dropsite-distance 8)
	(set-strategic-number sn-stone-dropsite-distance 3)
	(set-strategic-number sn-gold-dropsite-distance 3)

 	(set-strategic-number sn-maximum-wood-drop-distance 10)
	(set-strategic-number sn-maximum-food-drop-distance 8)
 	(set-strategic-number sn-maximum-hunt-drop-distance 12)
 	(set-strategic-number sn-maximum-gold-drop-distance 5)
 	(set-strategic-number sn-maximum-stone-drop-distance 4)
 	(set-strategic-number sn-maximum-fish-boat-drop-distance 30)
	(disable-self)
)

(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total stone-wall-line < 12)
=>
	(set-strategic-number sn-maximum-wood-drop-distance 3); move wood gatherers from far stragglers to the camp
	(disable-self)
)

(defrule
	(game-time > 600)
=>
	(set-strategic-number sn-maximum-wood-drop-distance 10); move wood gatherers from far stragglers to the camp
	(disable-self)
)


;DIFFICULTY PARAMETERS
;======================================================================

;scaled to the dificulty-level

(defrule
	(true)
=>
	(set-difficulty-parameter ability-to-dodge-missiles dodge-missiles)
	(set-difficulty-parameter ability-to-maintain-distance maintain-distance)
	(disable-self)
)
;=====ALL RIGHTS RESERVED============
