;************************************************************************************************************
;************************************************************************************************************
;STUFF FOR THE TOWN-SIZE

;Rule1: set the town size in the dark age

#load-if-defined HUN-CIV
(defrule
	(current-age == dark-age)
	(civ-selected hun)
=>
	(set-goal TOWN-SIZE-FOR-BUILDING 8)
	(set-strategic-number sn-minimum-town-size 6)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-camp-max-distance 10)
	(disable-self)
)


(defrule
	(current-age >= feudal-age)
	(civ-selected hun)
=>
	(set-goal TOWN-SIZE-FOR-BUILDING 18)
	(set-strategic-number sn-minimum-town-size 6)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(disable-self)
)

(defrule
	(current-age >= castle-age)
	(goal RUSH-CONTROL RUSHING)
=>
	(set-goal TOWN-SIZE-FOR-BUILDING 16)
	(set-strategic-number sn-minimum-town-size 10)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-camp-max-distance 24)
	(disable-self)
)

(defrule
	(current-age >= castle-age)
	(goal RUSH-CONTROL NO)
=>
	(set-goal TOWN-SIZE-FOR-BUILDING 20)
	(set-strategic-number sn-minimum-town-size 10)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-camp-max-distance 26)
	(disable-self)
)

;Huns build no houses. Only increase town size by 1 instead of 2.
(defrule
	(up-timer-status T-INCREASE-TOWN-SIZE != timer-running)
	(up-compare-goal TOWN-SIZE-FOR-BUILDING >= 20)
	;do not make it too big, or else villagers travel too far to build stuff, when they should gather resources
	;and newly created units will be alone close to enemy lines and just die.
	(up-compare-goal TOWN-SIZE-FOR-BUILDING < 90)
=>
	(enable-timer T-INCREASE-TOWN-SIZE 90)
	(up-modify-goal TOWN-SIZE-FOR-BUILDING c:+ 1)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
)

#else ;If civ-selected == hun

(defrule
	(current-age == dark-age)
=>
	(set-goal TOWN-SIZE-FOR-BUILDING 10)
	(set-strategic-number sn-minimum-town-size 6)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-camp-max-distance 10)
	(disable-self)
)

(defrule
	(current-age >= feudal-age)
=>
	(set-goal TOWN-SIZE-FOR-BUILDING 12)
	(set-strategic-number sn-minimum-town-size 6)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-camp-max-distance 18)
	(disable-self)
)

(defrule
	(current-age >= castle-age)
	(goal RUSH-CONTROL RUSHING)
=>
	(set-goal TOWN-SIZE-FOR-BUILDING 18)
	(set-strategic-number sn-minimum-town-size 12)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-camp-max-distance 24)
	(disable-self)
)

(defrule
	(current-age >= castle-age)
	(goal RUSH-CONTROL NO)
=>
	(set-goal TOWN-SIZE-FOR-BUILDING 23)
	(set-strategic-number sn-minimum-town-size 10)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-camp-max-distance 24)
	(disable-self)
)

(defrule
	(up-timer-status T-INCREASE-TOWN-SIZE != timer-running)
	(up-compare-goal TOWN-SIZE-FOR-BUILDING >= 20)
	;do not make it too big, or else villagers travel too far to build stuff, when they should gather resources
	;and newly created units will be alone close to enemy lines and just die.
	(up-compare-goal TOWN-SIZE-FOR-BUILDING < 90)
=>
	(enable-timer T-INCREASE-TOWN-SIZE 60)
	(up-modify-goal TOWN-SIZE-FOR-BUILDING c:+ 2)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
)
#end-if ;if civ-selected is not hun

;After 30min gradually increase camp max distance every 10 seconds
;if we fail to build new lumber-camps
(defrule
	(game-time > 900)
	(or
		(dropsite-min-distance wood > 10)
		(or
			(dropsite-min-distance gold > 4)
			(dropsite-min-distance stone > 4)
		)
	)
	(up-timer-status T-INCREASE-CAMP-DISTANCE <= timer-triggered)
=>
	(enable-timer T-INCREASE-CAMP-DISTANCE 60)
	(up-modify-sn sn-camp-max-distance c:+ 10)
	(chat-local-to-self "INCREASE CAMP DISTANCE")
)


;************************************************************************************************************
;HOUSING



#load-if-not-defined DEATH-MATCH
;***********************************************
;***********************************************

;Rule6: build HOUSES - in games which aren't deathmatch games

(defrule
	(or
		(housing-headroom <= 2)
		(and
			(game-time >= 300)
			(housing-headroom <= 4)
		)
	)
 	(can-build house)
	(population-headroom != 0)
	(up-pending-objects c: house < 1)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build house)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build HOUSE")
)

(defrule
	(or
		(housing-headroom <= 2)
		(and
			(game-time >= 300)
			(housing-headroom <= 8)
		)
	)
 	(can-build house)
	(population-headroom != 0)
	(current-age > dark-age)
	(or
		(goal RUSH-CONTROL CASTLE)
		(goal RUSH-CONTROL RUSHING)
	)
	(up-pending-objects c: house < 2)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build house)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build HOUSE")
)

(defrule
	(game-time >= 900)
	(housing-headroom <= 8)
 	(can-build house)
	(population-headroom != 0)
	(current-age >= castle-age)
	(up-pending-objects c: house < 3)
	(wood-amount > 150)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build house)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build HOUSE")
)

(defrule
	(game-time >= 900)
	(housing-headroom <= 25)
 	(can-build house)
	(population-headroom != 0)
	(current-age >= castle-age)
	(up-pending-objects c: house < 5)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build house)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build HOUSE")
)
;***********************************************
#else		;if not game-type == death-match
;***********************************************
;***********************************************

;Rule7: build HOUSES - in deathmatch games

(defrule
	(or
		(and
			(difficulty > moderate)
			(housing-headroom <= 25)
		)
		(and
			(difficulty <= moderate)
			(housing-headroom <= 6)
		)
	)
 	(can-build house)
	(population-headroom != 0)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build house)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build HOUSE")
)
;***********************************************
#end-if		;if game-type == death-match



;REBUILD TOWN-CENTER
;-------------------------------------

(defrule
 	(building-type-count-total town-center == 0)
 	(can-build town-center)
	(not (map-type nomad))
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build town-center)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "rebuild TOWN-CENTER")
)


;BUILD TOWN-CENTER IN NOMAD-MAP
;----------------------------------------------------------



;Rule8: build TOWN-CENTER

(defrule
	(map-type nomad)
  (game-time > 30)
	(building-type-count town-center < 1)
	(can-build town-center)
	(resource-found wood)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build town-center)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "rebuild TOWN-CENTER")
)
;************************************************************************************************************
;LUMBER CAMPS



#load-if-not-defined DEATH-MATCH
;***********************************************
;***********************************************


;Rule10: build LUMBER-CAMP first one when we found some wood in wonder race games

(defrule
 	(resource-found wood)
	(can-build lumber-camp)
	(building-type-count-total lumber-camp < 1)
	(dropsite-min-distance wood > 5)
	(or
		(civ-selected hun)
		(building-type-count house > 0)
	)
	(unit-type-count-total villager > 10)
=>
 	(build lumber-camp)
;	(chat-local-to-self "build LUMBER-CAMP")
)

;build extra lumber camp to avoid villagers wandering around so much in early game
(defrule
 	(resource-found wood)
	(can-build lumber-camp)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total lumber-camp < 2)
	(building-type-count-total mill > 0)
	(or
		(civ-selected hun)
		(building-type-count house > 0)
	)
	(or
		(unit-type-count-total villager > 20)
		(dropsite-min-distance wood > 6)
	)
=>
 	(build lumber-camp)
;	(chat-local-to-self "build LUMBER-CAMP")
)

;***********************************************
#else		;if not game-type == death-match
;***********************************************
;***********************************************

;Rule9: build LUMBER-CAMP first one when we found some wood in games which aren't wonder race games

(defrule
	(can-build lumber-camp)
	(building-type-count-total lumber-camp < 1)
	(building-type-count-total town-center > 0)
	(or
		(civ-selected hun)
		(building-type-count house > 0)
	)
=>
 	(build lumber-camp)
;	(chat-local-to-self "build LUMBER-CAMP")
)
;***********************************************
#end-if		;if game-type == death match



;*******************************************************************
;*******************************************************************
;EXTRA LUMBER-CAMPS // The villagers won't get the ood from only one lumber camp

;Rule15: build EXTRA-LUMBERCAMP if the wood is too far away

(defrule
	(current-age >= feudal-age)
	(strategic-number sn-wood-gatherer-percentage > 0)
	(can-build lumber-camp)
	(resource-found wood)
	(or
		(and
			(dropsite-min-distance wood > 3)
			(and
				(building-type-count-total town-center > 1)
				(goal ALL-ECONOMY-TECH-DONE YES)
			)
		)
		(dropsite-min-distance wood > 4)
	)
	(dropsite-min-distance wood < 480)
	(building-type-count-total barracks > 0)
	(building-type-count-total blacksmith > 0)
	(up-pending-objects c: lumber-camp <= 1)
	(game-time < 3600)
=>
	(build lumber-camp)
;	(chat-local-to-self "build LUMBER-CAMP")
)

(defrule
	(can-build lumber-camp)
	;(resource-found wood)
	(dropsite-min-distance wood > 7)
	(up-pending-objects c: lumber-camp <= 1)
	(game-time >= 1800)
=>
	(build lumber-camp)
;	(chat-local-to-self "build LUMBER-CAMP")
)

;************************************************************************************************************
;GOLD- AND STONE-MINING



#load-if-defined WONDER-RACE
;***********************************************
;***********************************************

;Rule16: build MINING-CAMP GOLD in dark-age and we found some gold (it mustn't be so far from the next camp) and we play wonder race


(defrule
 	(resource-found gold)
	(wood-amount > 200)
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 480)
 	(can-build mining-camp)
	(building-type-count-total mining-camp < 4)
	(up-research-status c: feudal-age >= research-pending)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 9); 12
;	(chat-local-to-self "build MINING-CAMP for GOLD")
)

(defrule
	(resource-found stone)
	(dropsite-min-distance stone > 3)
	(building-type-count-total mining-camp < 4)
 	(can-build mining-camp)
	(wood-amount > 200)
	(or
		(goal RUSH-CONTROL NO)
		(or
			(wood-amount > 500)
			(civilian-population > TEN-PERCENT-POP)
		)
	)
	(up-research-status c: feudal-age >= research-pending)
=>
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 9); 12
;	(chat-local-to-self "build MINING-CAMP for STONE")
)

(defrule
 	(current-age == imperial-age)
 	(resource-found gold)
	(dropsite-min-distance gold > 4)
 	(can-build mining-camp)
	(building-type-count-total mining-camp < 6)
	(building-type-count-total lumber-camp > 0)
=>
 	(build mining-camp)
;	(chat-local-to-self "build MINING-CAMP for GOLD")
)

(defrule
 	(current-age == imperial-age)
	(resource-found stone)
	(dropsite-min-distance stone > 4)
 	(can-build mining-camp)
	(building-type-count-total mining-camp < 6)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total market > 0)
=>
 	(build mining-camp)
;	(chat-local-to-self "build MINING-CAMP for STONE")
)
;***********************************************
#end-if		;if game type == wonder race



#load-if-not-defined WONDER-RACE
#load-if-not-defined DEATH-MATCH
;***********************************************
;***********************************************

;Rule20: build MINING-CAMPS through the ages

(defrule
 	(resource-found gold)
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 480)
 	(can-build mining-camp)
	(building-type-count-total mining-camp < 4)
	(up-research-status c: feudal-age >= research-pending)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 9); 12
;	(chat-local-to-self "build MINING-CAMP for GOLD")
)

(defrule
	(resource-found stone)
	(dropsite-min-distance stone > 3)
	(building-type-count-total mining-camp < 4)
 	(can-build mining-camp)
	(wood-amount > 500)
	(or
		(goal RUSH-CONTROL NO)
		(or
			(wood-amount > 800)
			(civilian-population > TEN-PERCENT-POP)
		)
	)
	(up-research-status c: castle-age >= research-pending)
=>
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 9); 12
;	(chat-local-to-self "build MINING-CAMP for STONE")
)

(defrule
    (or
		(up-research-status c: feudal-age >= research-pending)
		(and
			(current-age >= feudal-age)
			(game-time > 900)
		)
	)
	(resource-found gold)
	(dropsite-min-distance gold > 4)
	(dropsite-min-distance gold < 499)
 	(can-build mining-camp)
	(building-type-count-total lumber-camp > 0)
	(up-pending-objects c: mining-camp < 1)
	(or	
	   (and
	   	  (building-type-count mining-camp < 5)
		  (dropsite-min-distance gold > 5)
	   )
		(and
			(strategic-number sn-camp-max-distance > 45)
			(dropsite-min-distance gold > 13)
		)
	); don't spam camps if it's in an unreachable spot
	(building-type-count-total mining-camp < 20)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 6)
;	(chat-local-to-self "build MINING-CAMP")
)

;Build a second mining camp in castle-age, which has a high probability
;to be placed next to second gold pile
(defrule
    (or
		(up-research-status c: castle-age >= research-pending)
		(and
			(current-age >= feudal-age)
			(game-time > 900)
		)
	)
	(wood-amount > 300)
	(resource-found gold)
	(dropsite-min-distance gold > 0)
	(dropsite-min-distance gold < 499)
 	(can-build mining-camp)
	(building-type-count-total lumber-camp > 0)
	(up-pending-objects c: mining-camp < 1)
	(building-type-count-total mining-camp < 3)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 6)
;	(chat-local-to-self "build MINING-CAMP")
)

;Build a fourth mining camp in castle-age, which has a high probability
;to be placed next to second gold pile
(defrule
    (or
		(up-research-status c: castle-age >= research-pending)
		(game-time > 1200)
	)
	(wood-amount > 600)
	(resource-found stone)
	(dropsite-min-distance stone > 0)
	(dropsite-min-distance stone < 499)
 	(can-build mining-camp)
	(building-type-count-total lumber-camp > 0)
	(up-pending-objects c: mining-camp < 1)
	(building-type-count-total mining-camp < 4)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 6)
;	(chat-local-to-self "build MINING-CAMP")
)

(defrule
	(resource-found stone)
	(dropsite-min-distance stone > 4)
	(dropsite-min-distance stone < 499)
 	(can-build mining-camp)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total barracks > 0)
	(or
		(building-type-count-total archery-range > 0)
		(building-type-count-total stable > 0)
	)
	(up-research-status c: castle-age >= research-pending)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mining-camp > 0)
	(up-pending-objects c: mining-camp < 1)
	(or	(building-type-count mining-camp < 5)
	(and	(strategic-number sn-camp-max-distance > 45)
		(dropsite-min-distance stone > 13))); don't spam camps if it's in an unreachable spot
	(building-type-count-total mining-camp < 20)
=>
 	(set-strategic-number sn-allow-adjacent-dropsites 0)
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 6)
;	(chat-local-to-self "build MINING-CAMP")
)

;***********************************************
#else		;if not game-type == death-match
;***********************************************
;***********************************************
;Rule21: build MINING-CAMPS THROUGH THE OTHER AGES

(defrule
	(cc-players-unit-type-count 0 GOLD-MINE > 0)
	(dropsite-min-distance gold > 4)
	(dropsite-min-distance gold < 255)
 	(can-build mining-camp)
	(building-type-count-total mining-camp < 20)
	(building-type-count-total lumber-camp > 0)
	(current-age >= feudal-age)
	(up-pending-objects c: mining-camp < 1)
=>
 	(build mining-camp)
;	(chat-local-to-self "build MINING-CAMP")
)

;Build a second mining camp in castle-age, which has a high probability
;to be placed next to second gold pile which is close to town and which is otherwise
;walled in by buildings
(defrule
    (or
		(current-age >= castle-age)
		(or
			(current-age >= feudal-age)
			(game-time > 900)
		)
	)
	(wood-amount > 300)
	(resource-found gold)
	(dropsite-min-distance gold > 0)
	(dropsite-min-distance gold < 499)
 	(can-build mining-camp)
	(building-type-count-total lumber-camp > 0)
	(up-pending-objects c: mining-camp < 1)
	(building-type-count-total mining-camp < 3)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 6)
;	(chat-local-to-self "build MINING-CAMP")
)

;Build a fourth mining camp in castle-age, which has a high probability
;to be placed next to second gold pile
(defrule
    (or
		(up-research-status c: castle-age >= research-pending)
		(and
			(current-age >= feudal-age)
			(game-time > 900)
		)
	)
	(wood-amount > 600)
	(resource-found stone)
	(dropsite-min-distance stone > 0)
	(dropsite-min-distance stone < 499)
 	(can-build mining-camp)
	(building-type-count-total lumber-camp > 0)
	(up-pending-objects c: mining-camp < 1)
	(building-type-count-total mining-camp < 4)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
 	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 6)
;	(chat-local-to-self "build MINING-CAMP")
)

(defrule
	(cc-players-unit-type-count 0 STONE-MINE > 0)
	(dropsite-min-distance stone > 4)
	(dropsite-min-distance stone < 255)
 	(can-build mining-camp)
	(building-type-count-total mining-camp < 20)
	(building-type-count-total lumber-camp > 0)
	(current-age >= feudal-age)
	(up-pending-objects c: mining-camp < 1)
=>
 	(build mining-camp)
;	(chat-local-to-self "build MINING-CAMP")
)
;***********************************************
#end-if		;if game-type == death-match
#end-if		;if not game-type == wonder-race


;************************************************************************************************************
;************************************************************************************************************
;MILLS


;build MILL (FIRST) when we found some berry-bush, deer or fish
(defrule
	(or
		(resource-found food)
		(game-time > 250)
	)
	(can-build mill)
	(building-type-count-total mill < 1)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL")
)


;extra mill if we found deer
(defrule
	(dropsite-min-distance food > 8)
	(dropsite-min-distance food < 25)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill < 2)
	(resource-found food)
	(can-build mill)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL")
)


#load-if-not-defined WONDER-RACE
;***********************************************
;***********************************************



#load-if-not-defined YUCATAN-MAP

;Rule23: build EXTRA MILLS to collect gather the last berry-bushes, deers, boars and fishes on the map to save wood (we could use the wood to build farms)

(defrule
	(resource-found food)
	(can-build mill)
	(or
		(unit-type-count 122 > 0)
		(unit-type-count 216 > 0)
	)
	(building-type-count-total mill == 1)
	(unit-type-count 354 == 0)
	(unit-type-count 120 == 0)
	(wood-amount > 300)
	(building-type-count-total town-center > 2)
	(building-type-count-total monastery > 0)
	(building-type-count-total blacksmith > 0)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL")
)

(defrule
	(resource-found food)
	(can-build mill)
	(or
		(unit-type-count 56 > 0)
		(unit-type-count 57 > 0)
	)
	(building-type-count-total mill == 2)
	(unit-type-count 354 == 0)
	(unit-type-count 120 == 0)
	(wood-amount > 300)
	(building-type-count-total town-center > 2)
	(building-type-count-total monastery > 0)
	(building-type-count-total blacksmith > 0)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL")
)
;***********************************************
#else			;if we do not play on the yucatan map
;***********************************************
;***********************************************

;Rule23: build EXTRA MILLS to collect gather the last berry-bushes, deers, boars and fishes on the map to save wood (we could use the wood to build farms)

(defrule
	(resource-found food)
	(can-build mill)
	(building-type-count-total mill == 1)
	(or
		(unit-type-count 354 > 0)
		(unit-type-count 120 > 0)
	)
	(wood-amount > 200)
	(building-type-count-total town-center > 1)
	(building-type-count-total monastery > 0)
	(building-type-count-total blacksmith > 0)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL")
)

(defrule
	(resource-found food)
	(can-build mill)
	(or
		(unit-type-count 122 > 0)
		(unit-type-count 216 > 0)
	)
	(building-type-count-total mill == 2)
	(unit-type-count 354 == 0)
	(unit-type-count 120 == 0)
	(wood-amount > 200)
	(building-type-count-total town-center > 2)
	(building-type-count-total monastery > 0)
	(building-type-count-total blacksmith > 0)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL")
)

(defrule
	(resource-found food)
	(can-build mill)
	(or
		(unit-type-count 56 > 0)
		(unit-type-count 57 > 0)
	)
	(building-type-count-total mill == 3)
	(unit-type-count 354 == 0)
	(unit-type-count 120 == 0)
	(wood-amount > 200)
	(building-type-count-total town-center > 2)
	(building-type-count-total monastery > 0)
	(building-type-count-total blacksmith > 0)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL")
)
;***********************************************
#end-if		;if we play on the yucatan map

;Rule23: build EXTRA MILLS to collect gather the last berry-bushes, deers, boars and fishes on the map to save wood (we could use the wood to build farms)

(defrule
 	(current-age >= castle-age)
	(resource-found food)
	(dropsite-min-distance food >= 4)
	(can-build mill)
	(building-type-count-total mill < 5)
	(wood-amount > 300)
	(building-type-count-total town-center > 2)
	(building-type-count-total monastery > 0)
	(building-type-count-total blacksmith > 0)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL")
)
;***********************************************
#end-if		;if game-type != wonder race



;Rule24: build EXTRA MILLS when we have got many farms
(defrule
	(building-type-count farm > 15)
	(building-type-count lumber-camp > 0)
	(building-type-count-total mill < 2)
	(can-build mill)
	(building-type-count-total town-center > 2)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
)

(defrule
	(or
		(or
			(and
				(building-type-count-total farm > 25)
				(building-type-count-total mill < 3)
			)
			(and
				(building-type-count-total farm > 35)
				(building-type-count-total mill < 4)
			)
		)
		(and
			(building-type-count-total farm > 45)
			(building-type-count-total mill < 5)
		)
	)
	(can-build mill)
	(building-type-count lumber-camp > 0)
	(wood-amount > 400)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL (many farms)")
)

(defrule
	(or
		(or
			(and
				(building-type-count-total farm > 60)
				(building-type-count-total mill < 6)
			)
			(and
				(building-type-count-total farm > 70)
				(building-type-count-total mill < 7)
			)
		)
		(and
			(building-type-count-total farm > 80)
			(building-type-count-total mill < 9)
		)
	)
	(can-build mill)
	(building-type-count lumber-camp > 0)
	(wood-amount > 400)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build mill)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MILL (many farms)")
)


#load-if-not-defined WONDER-RACE


;Rule31: build FARMS-dark-age when we haven't got sheeps or turkeys anymore

(defrule
 	(current-age == dark-age)
 	(can-build farm)
	(sheep-and-forage-too-far)
	(game-time > 300)
	(building-type-count-total lumber-camp > 0)
	(idle-farm-count < 2)
	(up-pending-objects c: farm < 3)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)

(defrule
 	(current-age == feudal-age)
 	(can-build farm)
	(or	(sheep-and-forage-too-far)
(or	(dropsite-min-distance food >= 10)
	(dropsite-min-distance food <= -1)))
	(building-type-count-total lumber-camp > 0)
	(idle-farm-count < 2)
	(or
		(up-pending-objects c: farm < 2)
		(and
			(wood-amount > 500)
			(up-pending-objects c: farm < 4)
		)
	)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)

(defrule
 	(current-age >= castle-age)
 	(can-build farm)
 	(or
		(or
			(sheep-and-forage-too-far)
			(game-time > 1800)
		)
		(or
			(dropsite-min-distance food >= 10)
			(dropsite-min-distance food <= -1)
		)
	)
	(building-type-count-total lumber-camp > 0)
	(or
		(idle-farm-count < 1)
		(and
			(building-type-count-total town-center > 1)
			(and
				(goal ALL-ECONOMY-TECH-DONE YES)
				(idle-farm-count < 3)
			)
		)
	)
	(or
		(up-pending-objects c: farm < 3)
		(wood-amount > 500)
	)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)

(defrule
 	(can-build farm)
 	(unit-type-count villager > 60)
 	(wood-amount > 500)
	(idle-farm-count < 10)
	(up-pending-objects c: farm < 7)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)

(defrule
 	(can-build farm)
 	(unit-type-count villager > 120)
 	(wood-amount > 500)
	(idle-farm-count < 15)
	(up-pending-objects c: farm < 11)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)

(defrule
 	(can-build farm)
 	(unit-type-count villager > 180)
 	(wood-amount > 500)
	(idle-farm-count < 20)
	(up-pending-objects c: farm < 15)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)

#load-if-defined ARENA-MAP
;on the arena map, sheep can get stuck behind walls
(defrule
 	(can-build farm)
 	(unit-type-count villager > 45)
 	(not (sheep-and-forage-too-far))
 	(wood-amount > 500)
	(idle-farm-count < 5)
	(up-pending-objects c: farm < 3)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)
#end-if

;***********************************************
#else		;if not game type == wonder race
;***********************************************
;***********************************************



;Rule31: build FARMS-dark-age when we haven't got sheeps or turkeys anymore

(defrule
 	(current-age == dark-age)
 	(can-build farm)
 	(idle-farm-count < 2)
	(up-pending-objects c: farm < 2)
	(or
		(and
			(unit-type-count SHEEP < 2)
			(unit-type-count TURKEY < 2)
		)
		(current-age-time > 360)
	)
	(game-time > 300)
	(building-type-count-total lumber-camp > 0)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)

(defrule
 	(current-age == feudal-age)
 	(can-build farm)
	(idle-farm-count < 2)
	(up-pending-objects c: farm < 2)
	(or
		(and
			(unit-type-count SHEEP < 2)
			(unit-type-count TURKEY < 2)
		)
		(current-age-time > 360)
	)
	(building-type-count-total lumber-camp > 0)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)

(defrule
 	(current-age == feudal-age)
 	(can-build farm)
	(or
		(sheep-and-forage-too-far)
		(current-age-time > 600)
	)
	(idle-farm-count < 2)
	(up-pending-objects c: farm < 2)
	(or
		(or
			(building-type-count-total market > 0)
			(building-type-count-total archery-range > 0)
		)
		(building-type-count-total stable > 0)
	)
	(building-type-count-total lumber-camp > 0)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)

(defrule
 	(current-age >= castle-age)
 	(can-build farm)
	(idle-farm-count < 2)
	(up-pending-objects c: farm < 2)
	(or
		(and
			(unit-type-count SHEEP < 2)
			(unit-type-count TURKEY < 2)
		)
		(current-age-time > 360)
	)
	(building-type-count-total lumber-camp > 0)
=>
 	(build farm)
;	(chat-local-to-self "build FARM")
)


#end-if		;if game type == wonder race
;***********************************************
;***********************************************




;Rule42: build extra farms

(defrule
	(current-age == imperial-age)
	(idle-farm-count < 2)
	(up-pending-objects c: farm < 2)
	(can-build farm)
	(building-type-count-total lumber-camp > 0)
=>
	(build farm)
;	(chat-local-to-self "build extra farm")
)
;************************************************************************************************************
;CIVIL BUILDINGS



#load-if-not-defined DEFEND-WONDER
;***********************************************
;***********************************************

#load-if-not-defined WONDER-RACE
;***********************************************
;***********************************************

#load-if-not-defined DEATH-MATCH
;***********************************************
;***********************************************

;Rule43: build BLACKSMITH - to build one of the required buildings to research to the castle-age in random map- or defend-the-wonder - games (or king of the hill)

(defrule
	(building-type-count-total blacksmith < 1)
 	(current-age >= feudal-age)
 	(can-build blacksmith)
	(or
		(building-type-count-total mining-camp > 0)
		(gold-amount >= 200)
	)
	(or
		(not (goal RUSH-CONTROL RUSHING))
		(or
			(building-type-count-total archery-range > 0)
			(building-type-count-total stable > 0)
		)
	)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 250)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build blacksmith)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BLACKSMITH")
)
;***********************************************
#else		;if not game-type == death-match
;***********************************************
;***********************************************

;Rule44: build BLACKSMITH - to build one of the required buildings to research to the castle-age in death-match games

(defrule
	(building-type-count-total blacksmith < 2)
 	(current-age >= feudal-age)
 	(can-build blacksmith)
	(not (current-age == post-imperial-age))
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build blacksmith)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BLACKSMITH")
)
;***********************************************
#end-if		;if game-type == death-match

;***********************************************
;***********************************************
#else		;if not game-type == wonder-race
;***********************************************
;***********************************************

;Rule45: build MARKET in imperial age with escrow-resources

(defrule
 	(building-type-count-total market < 1)
 	(can-build market)
=>				 ;then
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build market)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MARKET")
)

(defrule
	(building-type-count-total blacksmith < 1)
 	(current-age >= feudal-age)
 	(can-build blacksmith)
	(building-type-count-total market > 0)
	(not (current-age == post-imperial-age))
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build blacksmith)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BLACKSMITH")
)
;***********************************************
#end-if		;if game-type == wonder race

;***********************************************
;***********************************************
#end-if		;if not game-type == defend-wonder


;Rule47: build MARKET- to build the other required building to research to the castle-age

(defrule
 	(building-type-count-total market < 1)
 	(can-build market)
	(current-age == feudal-age)
	(goal RUSH-CONTROL RUSHING)
	(building-type-count-total stable == 0)
	(building-type-count-total archery-range == 0)
	(goal RUSH-ATTACK-STARTED YES)
	(current-age-time > 300)
=>				 ;then
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: MARKET-NEG-DIST)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-build place-control 0 c: market)
 	(build market)
;	(chat-local-to-self "build MARKET")
)

(defrule
 	(current-age == feudal-age)
	(building-type-count-total market < 1)
	(or
		(building-type-count-total blacksmith > 0)
		(not (research-available ri-wheel-barrow))
	)
 	(can-build market)
	(or
		(civ-selected aztec)
		(civ-selected mayan)
	)
	(goal RUSH-CONTROL CASTLE)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build market)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MARKET")
)

(defrule
	(or
 		(building-type-count-total market < 1)
		(and
			;no need to get a second market if we have no ally to trade with
			(building-type-count-total market < 2)
			(player-in-game any-ally)
		)
	)
 	(can-build market)
	(current-age >= castle-age)
	(building-type-count-total town-center > 1)
	(or
		(building-type-count-total town-center > 2)
		(wood-amount > 600)
	)
	(wood-amount > 400)
	(goal ALL-ECONOMY-TECH-DONE YES)
=>				 ;then
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: MARKET-NEG-DIST)
	(set-strategic-number sn-placement-fail-delta 0)
	(up-build place-control 0 c: market)
 	(build market)
;	(chat-local-to-self "build MARKET")
)

;Delete all markets after one hour to rebuild them possibly further out
(defrule
	(game-time > 3600)
	(building-type-count-total market > 0)
	(player-in-game any-ally)
=>
	(delete-building market)
	(delete-building market)
	(disable-self)
)

;Delete all markets after two hours to rebuild them possibly further out
(defrule
	(game-time > 7200)
	(building-type-count-total market > 0)
	(player-in-game any-ally)
=>
	(delete-building market)
	(delete-building market)
	(disable-self)
)

#load-if-defined DEFEND-WONDER
(defrule
	(building-type-count-total monastery < 1)
 	(can-build monastery)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build monastery)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MONASTERY")
)
#end-if

#load-if-defined WONDER-RACE
(defrule
	(building-type-count-total monastery < 1)
 	(current-age == castle-age)
 	(can-build monastery)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build monastery)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MONASTERY")
)

(defrule
 	(current-age == castle-age)
 	(building-type-count-total university < 1)
 	(can-build university)
=>				 ;then
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build university)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build UNIVERSITY")
)
#end-if

#load-if-defined DEATH-MATCH
(defrule
	(building-type-count-total town-center > 1)
 	(current-age >= castle-age)
 	(building-type-count-total university < 1)
 	(can-build university)
	(not (current-age == post-imperial-age))
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build university)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build UNIVERSITY")
)
#end-if


#load-if-not-defined DEATH-MATCH
#load-if-not-defined DEFEND-WONDER
#load-if-not-defined WONDER-RACE
(defrule
	(building-type-count-total town-center > 1)
	(or
		(building-type-count-total town-center > 2)
		(or
			(wood-amount > 600)
			(stone-amount < 100)
		)
	)
 	(building-type-count-total university < 1)
	(building-type-count-total monastery > 0)
 	(can-build university)
	(or
		(goal RUSH-CONTROL NO)
		(wood-amount > 600)
	)
	(not (current-age == post-imperial-age))
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build university)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build UNIVERSITY")
)

(defrule
	(building-type-count-total town-center > 1)
	(or
		(building-type-count-total town-center > 2)
		(wood-amount > 600)
	)
	(goal ALL-ECONOMY-TECH-DONE YES)
	(building-type-count-total monastery < 1)
	(can-build monastery)
	(or
		(goal RUSH-CONTROL NO)
		(wood-amount > 400)
	)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build monastery)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MONASTERY")
)

(defrule
	(building-type-count-total monastery < 2)
	(or
		(and
			(building-type-count-total town-center > 2)
			(goal ALL-ECONOMY-TECH-DONE YES)
		)
		(wood-amount > 700)
	)
	(can-build monastery)
	(goal RUSH-CONTROL NO)
	(wood-amount > 1000)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build monastery)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build MONASTERY")
)
#end-if
#end-if
#end-if

;************************************************************************************************************
;************************************************************************************************************
;MILITARY BUILDINGS



#load-if-not-defined WONDER-RACE
;***********************************************
;***********************************************



;BARRACKS
;*******************************************************************
;*******************************************************************



;Rule54: don't build barracks if don't need any

(defrule
	(true)
=>
	(set-goal ABLE-TO-BUILD-BARRACKS NO)
)

(defrule
	(or
		(or
			(or
				(or
					(or
						(goal G-PRIMARY-UNIT militiaman-line)
						(goal G-SECONDARY-UNIT militiaman-line)
					)
					(goal G-PRIMARY-UNIT eagle-warrior-line)
				)
				(goal G-SECONDARY-UNIT eagle-warrior-line)
			)
			(goal G-PRIMARY-UNIT spearman-line)
		)
		(goal G-SECONDARY-UNIT spearman-line)
	)
=>
	(set-goal ABLE-TO-BUILD-BARRACKS YES)
)

(defrule
	(or
		(goal G-PRIMARY-UNIT militiaman-line)
		(goal G-SECONDARY-UNIT militiaman-line)
	)
=>
	(set-goal ABLE-TO-BUILD-BARRACKS YES)
)


;build the first BARRACKS
(defrule
	(current-age >= feudal-age)
	(can-build barracks)
	(building-type-count-total barracks < 1)
	(goal ALL-ECONOMY-TECH-DONE YES)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build first BARRACKS")
)

(defrule
	(current-age == feudal-age)
	(can-build barracks)
	(building-type-count-total barracks < 2)
	(goal ABLE-TO-BUILD-BARRACKS YES)
	(wood-amount > 600)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

(defrule
	(current-age == feudal-age)
	(can-build barracks)
	(building-type-count-total barracks < barracks-building-feudal)
	(goal ABLE-TO-BUILD-BARRACKS YES)
	(wood-amount > 1500)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

(defrule
	(can-build barracks)
	(or
		(and
			(building-type-count-total barracks < barracks-building-castle)
			(current-age == castle-age)
		)
		(and
			(building-type-count-total barracks < barracks-building-imperial)
			(current-age == imperial-age)
		)
	)
	(goal ABLE-TO-BUILD-BARRACKS YES)
	(wood-amount > 500)
	(goal ALL-ECONOMY-TECH-DONE YES)
	(building-type-count-total town-center > 1)
	(current-age >= castle-age)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: barracks)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

(defrule
	(current-age == dark-age)
 	(up-research-status c: feudal-age >= research-pending)
 	(can-build barracks)
	(building-type-count-total barracks < 1)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

(defrule
 	(current-age == feudal-age)
 	(can-build barracks)
	(or
		(building-type-count-total barracks < 1)
		(and
			(building-type-count-total barracks < 2)
			(wood-amount > 400)
		)
	)
	(or
		(goal RUSH-CONTROL FEUDAL)
		(goal RUSH-CONTROL RUSHING)
	)
	(goal ALL-ECONOMY-TECH-DONE YES)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

(defrule
	(current-age >= feudal-age)
 	(can-build barracks)
	(building-type-count-total barracks < 4)
	(or
		(building-type-count-total archery-range > 0)
		(building-type-count-total market > 0)
	)
	(building-type-count-total blacksmith >= 1)
	(or
		(goal RUSH-CONTROL CASTLE)
		(goal RUSH-CONTROL RUSHING)
	)
	(goal G-PRIMARY-UNIT eagle-warrior-line)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

(defrule
 	(current-age >= castle-age)
	(or
		(and
			(building-type-count-total barracks < 3)
			(or
				(wood-amount > 450)
				(building-type-count-total town-center > 1)
			)
		)
		(building-type-count-total barracks < 1)
	)
 	(can-build barracks)
	;(goal ABLE-TO-BUILD-BARRACKS YES)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: barracks)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

(defrule
 	(current-age >= castle-age)
	(building-type-count-total barracks < barracks-building-imperial)
	(or
		(wood-amount > 850)
		(building-type-count-total town-center > 2)
	)
	(building-type-count-total archery-range >= 2)
 	(can-build barracks)
	(goal ABLE-TO-BUILD-BARRACKS YES)
	(wood-amount > 600)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: barracks)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

(defrule
 	(current-age >= castle-age)
	(building-type-count-total barracks < barracks-building-imperial)
	(or
		(wood-amount > 850)
		(building-type-count-total town-center > 2)
	)
	(building-type-count-total stable >= 2)
 	(can-build barracks)
	(goal ABLE-TO-BUILD-BARRACKS YES)
	(wood-amount > 600)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: barracks)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

(defrule
 	(current-age >= castle-age)
	(building-type-count-total barracks < barracks-building-imperial)
	(wood-amount > 800)
	(building-type-count-total town-center > 2)
 	(can-build barracks)
	(or
		(goal ABLE-TO-BUILD-BARRACKS YES)
		(or
			(wood-amount > 1250)
			(food-amount > 3000) ;shift too many barracks for helebardiers if we have much food
		)
	)
	(unit-type-count-total villager > TWENTY-PERCENT-POP);can our economy support this?
	(up-pending-objects c: barracks < 2)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: barracks)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

#load-if-defined DEATH-MATCH
;***********************************************
;***********************************************

;Rule69: build BARRACKS, in death-match games keep at least five handy (<= moderate)
(defrule
 	(building-type-count-total barracks < 5)
 	(can-build barracks)
	(wood-amount > 700)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build barracks)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build BARRACKS")
)

;***********************************************
;***********************************************
#end-if		;if game-type == death-match



;*******************************************************************
;*******************************************************************
;STABLE



;Rule82: don't build stable if we don't need any

(defrule
	(true)
=>
	(set-goal ABLE-TO-BUILD-STABLE NO)
)

(defrule
	(or
		(or
			(goal G-PRIMARY-UNIT scout-cavalry-line)
			(goal G-PRIMARY-UNIT knight-line)
		)
		(or
			(goal G-PRIMARY-UNIT camel-line)
			(goal G-PRIMARY-UNIT steppe-lancer-line)
		)
	)
=>
	(set-goal ABLE-TO-BUILD-STABLE YES)
)


;build STABLES in feudal-age

(defrule
	(current-age == feudal-age)
	(can-build stable)
	(or
		(and
			(building-type-count-total stable < stable-building-feudal)
			(wood-amount > 700)
		)
		(building-type-count-total stable < 1)
	)
	(goal ABLE-TO-BUILD-STABLE YES)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build stable)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build STABLE")
)

;build a second stable when advancing to the castle age to spam knights
;quickly in case we get under attack
(defrule
	(can-build stable)
	(or
		(building-type-count-total stable < 1)
		(and
			(building-type-count-total stable < 2)
			(wood-amount > 800)
		)
	)
	(or
		(and
			(up-research-status c: castle-age >= research-pending)
			(current-age == feudal-age)
		)
		(current-age >= castle-age)
	)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build stable)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build STABLE")
)


;build STABLES in feudal-age

(defrule
 	(current-age == feudal-age)
	(building-type-count-total stable < 1)
	(building-type-count-total archery-range < 1)
 	(can-build stable)
	(not (goal ABLE-TO-BUILD-ARCHERY-RANGE YES))
	(or
		(goal RUSH-CONTROL CASTLE)
		(goal RUSH-CONTROL NO)
	)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 500)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build stable)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build STABLE")
)

(defrule
 	(current-age == feudal-age)
	(building-type-count-total stable < 1)
 	(can-build stable)
	(goal RUSH-CONTROL CASTLE)
	(goal ABLE-TO-BUILD-STABLE YES)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 500)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build stable)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build STABLE")
)

(defrule
 	(current-age == feudal-age)
	(building-type-count-total stable < 1)
 	(can-build stable)
	(goal RUSH-CONTROL CASTLE)
	(goal ABLE-TO-BUILD-STABLE YES)
	(wood-amount > 250)
	(goal G-PRIMARY-UNIT knight-line)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 500)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build stable)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build STABLE")
)

(defrule
	(current-age >= castle-age)
	(goal RUSH-CONTROL RUSHING)
	(building-type-count-total stable < 2)
	(can-build stable)
	(wood-amount > 300)
	(goal ABLE-TO-TRAIN-UNITS YES)
	(goal ABLE-TO-TRAIN-LAND-UNITS YES)
	(goal G-PRIMARY-UNIT knight-line)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build stable)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build STABLE")
)

(defrule
	(current-age >= castle-age)
	(can-build stable)
	(building-type-count-total stable < stable-building-imperial)
	(wood-amount > 800)
	(goal ALL-ECONOMY-TECH-DONE YES)
	(or
		(goal ABLE-TO-BUILD-STABLE YES)
		(or
			(wood-amount > 1250)
			(food-amount > 3000) ;shift too many stables for hussars if we have much food
		)
	)
	(building-type-count-total town-center > 2)
	(unit-type-count-total villager > TWENTY-PERCENT-POP) ;can our economy support this?
	(up-pending-objects c: stable < 2)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: stable)
	(build stable)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build STABLE")
)


#load-if-defined DEATH-MATCH
;***********************************************
;***********************************************

;Rule93: build STABLE, in death-match games keep at least five handy (<= moderate)
(defrule
 	(building-type-count-total stable < 5)
 	(can-build stable)
	(wood-amount > 700)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build stable)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build STABLE")
)

;***********************************************
;***********************************************
#end-if		;if game-type == death-match



;*******************************************************************
;*******************************************************************
;ARCHERY-RANGE



;Rule70: don't build archery-range if we don't need any

(defrule
	(true)
=>
	(set-goal ABLE-TO-BUILD-ARCHERY-RANGE NO)
)

(defrule
	(or
		(or
			(goal G-PRIMARY-UNIT archer-line)
			(goal G-PRIMARY-UNIT cavalry-archer-line)
		)
		(goal G-PRIMARY-UNIT skirmisher-line)
	)
=>
	(set-goal ABLE-TO-BUILD-ARCHERY-RANGE YES)
)

(defrule
	(or
		(or
			(goal G-SECONDARY-UNIT archer-line)
			(goal G-SECONDARY-UNIT cavalry-archer-line)
		)
		(goal G-SECONDARY-UNIT skirmisher-line)
	)
=>
	(set-goal ABLE-TO-BUILD-ARCHERY-RANGE YES)
)


;ARCHERY-RANGE in the feudal age

(defrule
 	(current-age == feudal-age)
 	(can-build archery-range)
	(or
		(building-type-count-total archery-range < 1)
		(and
			(building-type-count-total archery-range < 2)
			(wood-amount > 400)
		)
	)
	(or
		(goal RUSH-CONTROL FEUDAL)
		(goal RUSH-CONTROL RUSHING)
	)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 500)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build archery-range)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build ARCHERY-RANGE")
)

(defrule
	(current-age == feudal-age)
	(can-build archery-range)
	(or
		(and
			(building-type-count-total archery-range < archery-range-building-feudal)
			(wood-amount > 700)
		)
		(building-type-count-total archery-range < 1)
	)
	(goal ABLE-TO-BUILD-ARCHERY-RANGE YES)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 500)
	)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build archery-range)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build ARCHERY-RANGE")
)

(defrule
 	(current-age == feudal-age)
	(building-type-count-total archery-range < 1)
 	(can-build archery-range)
	(or
		(civ-selected aztec)
		(civ-selected mayan)
	)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 500)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build archery-range)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build ARCHERY-RANGE")
)

;ARCHERY-RANGES in feudal-age if we do a flush

(defrule
 	(current-age == feudal-age)
	(goal RUSH-CONTROL RUSHING)
	(or
		(and
			(and
				(wood-amount > 400)
				(building-type-count-total archery-range < 2)
			)
			(goal RUSH-ATTACK-STARTED YES)
		)
		(building-type-count-total archery-range < 1)
	)
 	(can-build archery-range)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 500)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build archery-range)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build ARCHERY-RANGE")
)

(defrule
 	(current-age == feudal-age)
	(building-type-count-total archery-range < 1)
 	(can-build archery-range)
	(goal ABLE-TO-BUILD-ARCHERY-RANGE YES)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 500)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build archery-range)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build ARCHERY-RANGE")
)

(defrule
 	(current-age >= feudal-age)
	(building-type-count-total archery-range < 1)
 	(can-build archery-range)
	(or
		(civ-selected aztec)
		(civ-selected mayan)
	)
	(goal RUSH-CONTROL NO)
	(or
		(goal ALL-ECONOMY-TECH-DONE YES)
		(wood-amount > 500)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build archery-range)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build ARCHERY-RANGE")
)

(defrule
	(current-age >= castle-age)
	(can-build archery-range)
	(wood-amount > 700)
	(building-type-count-total archery-range < 3)
	;(goal ABLE-TO-BUILD-ARCHERY-RANGE YES)
	(goal ALL-ECONOMY-TECH-DONE YES)
=>
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: archery-range)
	(build archery-range)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build ARCHERY-RANGE")
)

(defrule
 	(current-age >= castle-age)
	(building-type-count-total archery-range < archery-range-building-imperial)
	(building-type-count-total town-center > 2)
	(goal ALL-ECONOMY-TECH-DONE YES)
 	(can-build archery-range)
	;(goal ABLE-TO-BUILD-ARCHERY-RANGE YES)
	(or
		(wood-amount > 1250)
		(food-amount > 3000) ;shift too many archery-ranges for skirmishers if we have much food
	)
	(unit-type-count-total villager > TWENTY-PERCENT-POP) ;can our economy support this?
	(up-pending-objects c: archery-range < 2)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: archery-range)
	(build archery-range)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build ARCHERY-RANGE")
)

#load-if-defined DEATH-MATCH
;***********************************************
;***********************************************

;ARCHERY-RANGE, in death-match games keep at least five handy (<= moderate)
(defrule
 	(building-type-count-total archery-range < 5)
 	(can-build archery-range)
	(wood-amount > 700)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build archery-range)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build ARCHERY-RANGE")
)
;***********************************************
;***********************************************
#end-if		;if game-type == death-match



;*******************************************************************
;*******************************************************************
;SIEGE-WORKSHOP

(defrule
 	(current-age >= castle-age)
 	(can-build siege-workshop)
 	(or
		(not (goal PRIMARY-COMBAT-SIEGE-UNIT NO))
		(not (goal SECONDARY-COMBAT-SIEGE-UNIT NO))
	)
	(nand
		(goal PRIMARY-COMBAT-SIEGE-UNIT trebuchet)
		(building-type-count-total castle > 0)
	)
	(or
		(building-type-count-total siege-workshop < 1)
		(and
			(building-type-count-total siege-workshop < siege-workshop-building-imperial)
			(wood-amount > 1200)
		)
	)
	(wood-amount > 550)
	(building-type-count-total town-center > 2)
	(building-type-count-total monastery > 0)
	(building-type-count-total university > 0)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build siege-workshop)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build SIEGE-WORKSHOP")
)

(defrule
 	(current-age >= castle-age)
 	(can-build siege-workshop)
 	(goal RUSH-CONTROL RUSHING)
	(building-type-count-total siege-workshop < 2)
	(military-population > EIGHT-PERCENT-POP)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build siege-workshop)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build SIEGE-WORKSHOP")
)


#load-if-defined DEATH-MATCH
;***********************************************
;***********************************************

;Rule106: build SIEGE-WORKSHOP, in death-match games keep at least two handy
(defrule
 	(building-type-count-total siege-workshop < 2)
 	(can-build siege-workshop)
	(wood-amount > 700)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build siege-workshop)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build SIEGE-WORKSHOP")
)
;***********************************************
#end-if		;if game-type == death-match



;************************************************************************************************************
;************************************************************************************************************
;DEFENDING BUILDINGS



;WALLS
;***********************************************
;***********************************************



;Rule107: define the WALL-PLACEMENT

(defrule
	(not (map-type fortress))
	(not (map-type arena))
	(difficulty <= easy)
=>
	(enable-wall-placement 2)
	(disable-self)
)



#load-if-not-defined DEFEND-WONDER
;***********************************************
;***********************************************

;Rule113: build the WALL

;No wall building for now, the AI more often than not gets stuck in some way.
;(defrule
;	(or
;		(map-type black-forest)
;		(map-type yucatan)
;	)
;	(difficulty <= easy)
;	(can-build-wall 2 stone-wall-line)
;	(wall-completed-percentage 2 < 100)
;	(current-age == imperial-age)
;=>
;	(build-wall 2 stone-wall-line)
;)
;
;(defrule
;	(wall-completed-percentage 2 > 0)
; 	(building-type-count-total gate < 12)
; 	(can-build-gate 2)
;	(up-pending-objects c: gate <= 3)
;=>
;	(build-gate 2)
;)
;
;;Delete wall if too few gates to not wall ourselves in
;(defrule
;	(wall-completed-percentage 2 == 100)
;	(building-type-count-total gate < 5)
;=>
;	(delete-building stone-wall-line)
;)

#end-if		;if not game-type == defend-the-wonder
;***********************************************
;***********************************************



;CASTLES
;***********************************************
;***********************************************

(defrule
	(or
		(and
 			(current-age == castle-age)
 			(building-type-count-total castle < castle-building-castle)
		)
		(and
 			(current-age == imperial-age)
 			(building-type-count-total castle < castle-building-imperial)
		)
	)
 	(can-build castle)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(set-strategic-number sn-placement-fail-delta 1)
	(up-build place-control 0 c: castle)
 	(build castle)
 	(up-assign-builders c: castle c: 3)
;	(chat-local-to-self "build CASTLE")
)

;***********************************************
;***********************************************



;BOMBARD-TOWERS
(defrule
 	(current-age >= imperial-age)
 	(or
		(building-type-count-total bombard-tower < 5)
		(stone-amount > 900)
	)
 	(can-build bombard-tower)
	(or
		(building-type-count-total castle >= 4)
		(death-match-game)
	)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(up-build place-control 0 c: bombard-tower)
 	(build bombard-tower)
;	(chat-local-to-self "build BOMBARD-TOWER")
)


#load-if-defined DEATH-MATCH

;Rule120: build WATCH-TOWERS (feudal-age) in deathmatch-games

(defrule
 	(current-age == feudal-age)
 	(building-type-count-total watch-tower < watch-tower-building-feudal)
 	(can-build watch-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(up-build place-control 0 c: watch-tower)
 	(build watch-tower)
;	(chat-local-to-self "build TOWER")
)

#end-if


#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV

;Rule121: build WATCH-TOWERS all the numbers here are scaled to the difficulty level part 2 (castle-age)

(defrule
 	(current-age == castle-age)
 	(building-type-count-total watch-tower < watch-tower-building-castle)
 	(can-build watch-tower)
	(building-type-count-total castle >= 5)
	(building-type-count-total town-center >= 3)
=>			;then
 	(build watch-tower)
;	(chat-local-to-self "build TOWER")
)

(defrule
 	(current-age == imperial-age)
 	(building-type-count-total watch-tower < watch-tower-building-imperial)
 	(can-build watch-tower)
	(or
		(building-type-count-total castle >= 6)
		(death-match-game)
	)
	(not (can-build bombard-tower))
	(building-type-count-total town-center >= 3)
=>
	(set-strategic-number sn-ignore-tower-elevation 0)
	(set-strategic-number sn-placement-to-center 1)
	(up-set-placement-data my-player-number -1 c: 12)
	(set-strategic-number sn-placement-zone-size 12)
	(up-build place-control 0 c: watch-tower)
 	(build watch-tower)
;	(chat-local-to-self "build TOWER")
)

#end-if		;if not civ == gothic
#end-if		;if not civ == hun



;TOWN-CENTERS
;***********************************************
;***********************************************

(defrule
	(or
		(resource-found wood)
		(dropsite-min-distance wood s:<= sn-camp-max-distance)
	)
=>
	(set-strategic-number sn-town-center-placement lumber-camp)
)

(defrule
	(building-type-count-total town-center >= 2)
	(building-type-count-total town-center <= 4)
	(or
		(resource-found gold)
		(resource-found stone)
	)
	(or
		(dropsite-min-distance gold s:<= sn-camp-max-distance)
		(dropsite-min-distance stone s:<= sn-camp-max-distance)
	)
=>
	(set-strategic-number sn-town-center-placement mining-camp)
)

#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
 	(current-age == castle-age)
 	(building-type-count-total town-center < 4)
 	(can-build town-center)
 	(or
		(wood-amount > 500)
 		(goal ALL-ECONOMY-TECH-DONE YES)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build town-center)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
 	(up-assign-builders c: 621 c: 4) ; town-center-foundation: 621
;	(chat-local-to-self "build TOWN-CENTER")
)

(defrule
 	(current-age >= castle-age)
 	(building-type-count-total town-center < 5)
	(or
		(building-type-count-total town-center < 2)
		(building-type-count-total castle > 0) ;make sure not to spend all stone on town centers
	)
 	(can-build town-center)
	(or
		(wood-amount > 500)
 		(goal ALL-ECONOMY-TECH-DONE YES)
	)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build town-center)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
 	(up-assign-builders c: 621 c: 4) ; town-center-foundation: 621
;	(chat-local-to-self "build TOWN-CENTER")
)

(defrule
 	(current-age >= castle-age)
 	(building-type-count-total town-center < 6)
 	(building-type-count-total castle >= 2)
 	(wood-amount > 600)
 	(can-build town-center)
 	(goal ALL-ECONOMY-TECH-DONE YES)
 	(unit-type-count-total villager > 130)
=>
 	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-BUILDING)
	(build town-center)
	(up-modify-sn sn-maximum-town-size g:= TOWN-SIZE-FOR-ATTACKING)
;	(chat-local-to-self "build TOWN-CENTER")
)
#end-if		;if difficult not moderate
#end-if		;if difficult not easy
#end-if		;if difficult not easiest

;***********************************************
#end-if		;if not game type == wonder race



;************************************************************************************************************
;************************************************************************************************************
;DOCKS



#load-if-not-defined WONDER-RACE
;***********************************************
;***********************************************



;Rule130: build first dock

(defrule
	(or
		(or
			(goal MAP-KIND RIVERS-MAP)
			(goal MAP-KIND ISLAND-MAP)
		)
		(goal MAP-KIND WATER-MAP)
	)
	(building-type-count-total dock == 0)
	(building-type-count-total barracks > 0)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
	(can-build dock)
	(building-type-count-total lumber-camp >= 1)
	(or
		(up-research-status c: castle-age >= research-pending)
		(current-age >= castle-age)
	)
=>
	(build dock)
;	(chat-local-to-self "build DOCK")
)

(defrule
	(or
		(or
			(goal MAP-KIND RIVERS-MAP)
			(goal MAP-KIND ISLAND-MAP)
		)
		(goal MAP-KIND WATER-MAP)
	)
	(building-type-count-total dock == 0)
	(building-type-count-total barracks > 0)
	(building-type-count-total stable > 0)
	(building-type-count-total blacksmith > 0)
	(can-build dock)
	(building-type-count-total lumber-camp >= 1)
	(or
		(up-research-status c: castle-age >= research-pending)
		(current-age >= castle-age)
	)
=>
	(build dock)
;	(chat-local-to-self "build DOCK")
)

(defrule
	(or
		(or
			(goal MAP-KIND RIVERS-MAP)
			(goal MAP-KIND ISLAND-MAP)
		)
		(goal MAP-KIND WATER-MAP)
	)
	(building-type-count-total dock < 2)
	(building-type-count-total barracks > 0)
	(building-type-count-total archery-range > 0)
	(building-type-count-total blacksmith > 0)
	(can-build dock)
	(wood-amount > 200)
	(building-type-count-total lumber-camp >= 1)
	(or
		(building-type-count-total town-center > 1)
		(wood-amount > 400)
	)
=>
	(build dock)
;	(chat-local-to-self "build DOCK")
)

(defrule
	(or
		(or
			(goal MAP-KIND RIVERS-MAP)
			(goal MAP-KIND ISLAND-MAP)
		)
		(goal MAP-KIND WATER-MAP)
	)
	(building-type-count-total dock < 2)
	(building-type-count-total barracks > 0)
	(building-type-count-total stable > 0)
	(building-type-count-total blacksmith > 0)
	(can-build dock)
	(wood-amount > 200)
	(building-type-count-total lumber-camp >= 1)
	(or
		(building-type-count-total town-center > 1)
		(wood-amount > 400)
	)
=>
	(build dock)
;	(chat-local-to-self "build DOCK")
)

(defrule
	(or
		(or
			(goal MAP-KIND RIVERS-MAP)
			(goal MAP-KIND ISLAND-MAP)
		)
		(goal MAP-KIND WATER-MAP)
	)
	(current-age >= castle-age)
	(wood-amount > 300)
	(building-type-count-total dock < 3)
	(can-build dock)
	(building-type-count-total lumber-camp >= 1)
	(or
		(building-type-count-total town-center > 1)
		(wood-amount > 400)
	)
=>
	(build dock)
;	(chat-local-to-self "build DOCK")
)

(defrule
	(or
		(goal MAP-KIND WATER-MAP)
		(goal MAP-KIND ISLAND-MAP)
	)
	(current-age == imperial-age)
	(wood-amount > 300)
	(difficulty <= moderate)
	(building-type-count-total dock < 4)
	(can-build dock)
	(building-type-count-total lumber-camp >= 1)
	(or
		(building-type-count-total town-center > 1)
		(wood-amount > 400)
	)
=>
	(build dock)
;	(chat-local-to-self "build DOCK")
)

(defrule
	(or
		(goal MAP-KIND WATER-MAP)
		(goal MAP-KIND ISLAND-MAP)
	)
	(current-age == imperial-age)
	(wood-amount > 1000)
	(difficulty <= hard)
	(building-type-count-total dock < 6)
	(can-build dock)
	(building-type-count-total lumber-camp >= 1)
=>
	(build dock)
;	(chat-local-to-self "build DOCK")
)

#load-if-defined DEFEND-WONDER
;***********************************************
;***********************************************

;Rule134: build docks when we play "defend-the-wonder" (number of docks scaled to the water size)

(defrule
	(or
		(and
			(goal MAP-KIND WATER-MAP)
			(building-type-count-total dock < 2)
		)
		(and
			(not (goal MAP-KIND LAND-MAP))
			(building-type-count-total dock == 0)
		)
	)
	(can-build dock)
	(building-type-count-total lumber-camp >= 1)
=>
	(build dock)
;	(chat-local-to-self "build DOCK")
)
;***********************************************
#end-if		;if game type == defend-the-wonder

;***********************************************
;***********************************************
#else		;if not game-type == wonder-race
;***********************************************
;***********************************************

;Rule135: build a dock when we have got a lumber camp

(defrule
	(or
		(or
			(goal MAP-KIND RIVERS-MAP)
			(goal MAP-KIND ISLAND-MAP)
		)
		(goal MAP-KIND WATER-MAP)
	)
	(building-type-count-total dock == 0)
	(building-type-count-total lumber-camp > 0)
	(can-build dock)
=>
	(build dock)
)

(defrule
	(or
		(or
			(goal MAP-KIND RIVERS-MAP)
			(goal MAP-KIND ISLAND-MAP)
		)
		(goal MAP-KIND WATER-MAP)
	)
	(current-age >= feudal-age)
	(wood-amount > 400)
	(building-type-count-total dock < 2)
	(can-build dock)
=>
	(build dock)
)

(defrule
	(or
		(or
			(goal MAP-KIND RIVERS-MAP)
			(goal MAP-KIND ISLAND-MAP)
		)
		(goal MAP-KIND WATER-MAP)
	)
	(current-age >= castle-age)
	(wood-amount > 1000)
	(building-type-count-total dock < 2)
	(can-build dock)
=>
	(build dock)
)
;************************************************************************************************************
;BUILD THE WONDER IN WONDER RACE GAMES



;Rule137 and 138: build the wonder in wonder race games

(defrule
	(true)
=>
	(set-goal WONDER-ATTEMPT YES)
)

(defrule
	(goal WONDER-ATTEMPT YES)
	(can-build wonder)
=>
	(set-strategic-number sn-percent-civilian-builders 95)
	(set-strategic-number sn-cap-civilian-builders 40)
	(set-strategic-number sn-percent-civilian-gatherers 5)
	(release-escrow wood)
	(release-escrow gold)
	(release-escrow stone)
	(build wonder)
	(set-goal WONDER-ATTEMPT POSSIBLE)
	(chat-to-player every-ally "39 Okay, I have got the resources to build a wonder!")
)
;***********************************************
#end-if		;if game-type == wonder race



;************************************************************************************************************
;************************************************************************************************************
;FORWARD BUILDINGS


;===============================
;ATTACK-PERSONALITY: ATTACKER
;===============================



#load-if-not-defined WONDER-RACE


;**********************************
;**********************************
;BOMBARD-TOWES AND CASTLES


#load-if-defined KOREAN-CIV

;Rule19: if we are the koreans we can do a bombard-tower-rush

(defrule
	(can-build bombard-tower)
	(building-type-count-total castle >= 2)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith > 0)
	(goal ATTACK-PERSONALITY ATTACKER)
	(goal ATTACK-STATE ATTACKING)
=>
	(build-forward bombard-tower)
)

#end-if		;if civ == korean



#load-if-defined TURKISH-CIV

;Rule19: if we are the koreans we can do a bombard-tower-rush

(defrule
	(can-build bombard-tower)
	(building-type-count-total castle >= 2)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith > 0)
	(goal ATTACK-PERSONALITY ATTACKER)
	(goal ATTACK-STATE ATTACKING)
=>
	(build-forward bombard-tower)
)

#end-if		;if civ == turkish


;FORWARD-CASTLE

(defrule
	(goal ATTACK-PERSONALITY ATTACKER)
	(current-age >= castle-age)
	(players-current-age any-enemy < castle-age)
	(can-build castle)
	(goal ATTACK-STATE ATTACKING)
=>
	(build-forward castle)
;	(chat-local-to-self "build FORWARD-CASTLE")
)

(defrule
	(goal ATTACK-PERSONALITY ATTACKER)
	(current-age >= castle-age)
	(or
		(goal RUSH-CONTROL RUSHING)
		(and
			(building-type-count-total castle > 1)
			(building-type-count-total castle < 14)
		)
	)
	(can-build castle)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith > 0)
	(goal ATTACK-STATE ATTACKING)
	(goal MILITARY-PARITY VASTLY-SUPERIOR)
=>
	(build-forward castle)
;	(chat-local-to-self "build FORWARD-CASTLE")
)

;***********************************
;***********************************
;HOUSES
;Build some forward houses as a quick way to split enemy armies,
;also some tanks to take enemy damage to divert the damage from our troops
(defrule
	(current-age >= castle-age)
	(can-build house)
	(wood-amount > 800)
	(goal ATTACK-STATE ATTACKING)
	(building-type-count-total house < 120)
	(up-pending-objects c: house < 3)
	(goal MILITARY-PARITY VASTLY-SUPERIOR)
	(player-in-game any-human-enemy)
=>
	(build-forward house)
;	(chat-local-to-self "build FORWARD-HOUSE")
)


;***********************************
;***********************************
;BARRACKS


(defrule
	(goal ATTACK-PERSONALITY ATTACKER)
	(can-build barracks)
	(goal ABLE-TO-BUILD-BARRACKS YES)
	(wood-amount > 1500)
	(goal ATTACK-STATE ATTACKING)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith > 0)
	;(building-type-count-total barracks >= 3)
	(up-pending-objects c: barracks < 2)
	(player-in-game any-human-enemy)
=>
	(build-forward barracks)
)

;***********************************
;***********************************
;ARCHERY-RANGE


(defrule
	(goal ATTACK-PERSONALITY ATTACKER)
	(can-build archery-range)
	(goal ABLE-TO-BUILD-ARCHERY-RANGE YES)
	(wood-amount > 1500)
	(goal ATTACK-STATE ATTACKING)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith > 0)
	;(building-type-count-total archery-range >= 3)
	(up-pending-objects c: archery-range < 2)
	(player-in-game any-human-enemy)
=>
	(build-forward archery-range)
)

;***********************************
;***********************************
;STABLE


(defrule
	(goal ATTACK-PERSONALITY ATTACKER)
	(can-build stable)
	(goal ABLE-TO-BUILD-STABLE YES)
	(wood-amount > 1500)
	(goal ATTACK-STATE ATTACKING)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith > 0)
	;(building-type-count-total stable >= 3)
	(up-pending-objects c: stable < 2)
	(player-in-game any-human-enemy)
=>
	(build-forward stable)
)

;==================
;FORWARD BUILDERS
;==================



;Rule27: initialisation of the number of forward builders

(defrule
	(true)
=>
	(set-strategic-number sn-number-forward-builders 0)
	(disable-self)
)


#end-if		;if not game type == wonder race
